package UDPChat.Server;

//
// Source file for the server side. 
//
// Created by Sanny Syberfeldt
// Maintained by Marcus Brohede
//

import java.io.IOException;
import java.net.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.Iterator;

public class Server
{

	static double TRANSMISSION_FAILURE_RATE = 0.3;
	private ArrayList<ClientConnection> m_connectedClients = new ArrayList<ClientConnection>();
	private ArrayList<String> m_messageList = new ArrayList<String>();
	private DatagramSocket m_socket;
	private boolean receivedPoll = false;

	public static void main(String[] args)
	{
		if (args.length < 1)
		{
			System.err.println("Usage: java -jar Server.jar <portnumber>");
			System.exit(-1);
		}
		try
		{
			Server instance = new Server(Integer.parseInt(args[0]));
			instance.listenForClientMessages();
		} catch (NumberFormatException e)
		{
			System.err.println("Error: port number must be an integer.");
			System.exit(-1);
		}
	}

	private Server(int portNumber)
	{
		try
		{
			m_socket = new DatagramSocket(portNumber);
		} catch (SocketException e)
		{
			System.err.println("Error: failed to create socket.");
			e.printStackTrace();
		}

		System.out.println("Created socket at port " + m_socket.getLocalPort());

	}

	private void listenForClientMessages()
	{
		// Concurrently check if all clients are still connected
		//new Thread(new pollClientStatus()).start();
		
		System.out.println("Waiting for client messages... ");

		do
		{
			byte[] buf = new byte[256];
			DatagramPacket packet = new DatagramPacket(buf, buf.length);

			try
			{
				m_socket.receive(packet);
			} catch (IOException e1)
			{
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			// Unpack message
			String message = unpack(packet);

			// Split message into segments containing type, message and/or arguments
			/*
			 * messageComponent[0] = type XX 
			 * messageComponent[1] = messageCounter 
			 * messageComponent[2] = name 
			 * messageComponent[3] = message/argument 
			 * messageComponent[4] = message (if argument present)
			 */
			
			String[] messageComponent = message.split("\\|");

			// Read packet sender address and port
			InetAddress address = packet.getAddress();
			int port = packet.getPort();

			// Read message type, message count and sender name
			String type = messageComponent[0];
			String messageID = messageComponent[1];
			String name = messageComponent[2];

			// Check if message has already been interpreted
			if (!type.equals("01") && messageAlreadyInterpreted(messageID))
			{
				System.out.println("Message already interpreted");
				acknowledgeMessage(name, "%ACK%", address, port);
				continue;
			}
			// Uninterpreted, non-connection request messages are acknowledged
			else if (!type.equals("01"))
			{
				acknowledgeMessage(name, "%ACK%", address, port);
			}
			
			switch (type)
			{

			case "00": // Broadcast global message
				broadcast(name + ": " + messageComponent[3]);
				break;

			case "01": // Handshake

				System.out.println("Adding client...");

				// Add client with name, address & port
				if (addClient(name, address, port))
				{
					String response = ("OK");
					buf = response.getBytes();
					packet = new DatagramPacket(buf, buf.length, address, port);
				} else
				{
					System.err.println("Error: name already taken");
					String response = ("NAME");
					buf = response.getBytes();
					packet = new DatagramPacket(buf, buf.length, address, port);
				}

				try
				{
					m_socket.send(packet);
				} catch (IOException e)
				{
					System.err.println("Error: failed to send handshake response");
					e.printStackTrace();
				}

				break;

			case "02": // Private message
				
				String recepient = messageComponent[3];
				String whisper = name + " whispers: " + messageComponent[4];
				System.out.println("Sending private message: " + whisper + " to client " + recepient);
				sendPrivateMessage(recepient, whisper);
				break;

			case "03": // List request
				// Send a list of all clients
				printClientList(name, address, port);
				break;

			case "04": // Leave request
				// Disconnect user
				disconnectClient(name);
				break;
				
			case "05": // Message delivery acknowledgement // Ack message
				receivedAck(name);
				System.out.println("Client reception acknowledged"); 
				break;
				
			case "06": // Responding to poll
				receivedPoll = true;
				break;

			default:
				System.err.println("Error: unknown message type: " + messageComponent[0]);

			}
			
			disconnectClient(null);

		} while (true);
	}

	public void broadcast(String msg)
	{
		ClientConnection c;
		for (Iterator<ClientConnection> itr = m_connectedClients.iterator(); itr.hasNext();)
		{
			c = itr.next();
			DatagramPacket message = pack(c.getAckCounter(), msg, c.getAddress(), c.getPort());
			if(!c.sendMessage(message, m_socket))
				c.markedForDeath = true;
		}
	}

	public boolean addClient(String name, InetAddress address, int port)
	{
		ClientConnection c = null;
		for (Iterator<ClientConnection> itr = m_connectedClients.iterator(); itr.hasNext();)
		{
			c = itr.next();
			if (c.hasName(name))
			{
				return false; // Already exists a client with this name
			}
		}
		m_connectedClients.add(new ClientConnection(name, address, port));
		System.out.println("ADDCLIENT: ´name:" + name + " address:" + address + " port:" + port + " size:" + m_connectedClients.size());
		broadcast(m_connectedClients.get(m_connectedClients.size()-1).getName() + " joined the chat");
		System.out.println("Added client " + m_connectedClients.get(m_connectedClients.size()-1).getName() + " sucessfully");
		return true;
	}

	public void sendPrivateMessage(String recepient, String whisper)
	{
		ClientConnection c;
		for (Iterator<ClientConnection> itr = m_connectedClients.iterator(); itr.hasNext();)
		{
			c = itr.next();
			if (c.hasName(recepient))
			{
				DatagramPacket message = pack(c.getAckCounter(), whisper, c.getAddress(), c.getPort());
				if(!c.sendMessage(message, m_socket))
					c.markedForDeath = true;
			}
		}
	}

	public boolean messageAlreadyInterpreted(String messageID)
	{
		String c;
		for (Iterator<String> itr = m_messageList.iterator(); itr.hasNext();)
		{
			c = itr.next();
			if (c.equals(messageID))
			{
				return true;
			}
		}
		// Message not already interpreted
		m_messageList.add(messageID);
		return false;
	}

	public void acknowledgeMessage(String name, String msg, InetAddress address, int port)
	{
		System.out.println("Acknowledging message from " + name + "...");
		ClientConnection c;
		for (Iterator<ClientConnection> itr = m_connectedClients.iterator(); itr.hasNext();)
		{
			c = itr.next();
			if (c.hasName(name))
			{
				DatagramPacket message = pack(c.getAckCounter(), msg, address, port);
				c.returnAck(message, m_socket);
				return;
			}
		}
	}

	public void receivedAck(String name)
	{
		ClientConnection c;
		for (Iterator<ClientConnection> itr = m_connectedClients.iterator(); itr.hasNext();)
		{
			c = itr.next();
			if (c.hasName(name))
			{
				c.isAcked = true;
			}
		}
	}

	public void printClientList(String name, InetAddress address, int port)
	{
		String clientList = new String("[List of all active clients]");
		ClientConnection c;
		for (Iterator<ClientConnection> itr = m_connectedClients.iterator(); itr.hasNext();)
		{
			c = itr.next();
			clientList += (System.getProperty("line.separator") + "> " + c.getName());
		}
		sendPrivateMessage(name, clientList.toString());
	}

	public void disconnectClient(String name)
	{	
		if(name == null) {
			return;
		}
		ClientConnection c;
		for (Iterator<ClientConnection> itr = m_connectedClients.iterator(); itr.hasNext();)
		{
			c = itr.next();
			System.out.println("Client " + c.getName() + " " + c.markedForDeath);
			if (c.hasName(name))
			{
				System.out.println("BEFORE: No of clients: " + m_connectedClients.size());
				//sendPrivateMessage(name, "%DC%"); //TODO handle DC
				m_connectedClients.remove(c);
				c = null;	// May be unnecessary
				broadcast(name + " disconnected");
				System.out.println("AFTER: No of clients: " + m_connectedClients.size());
				return;
			}
			else if (c.markedForDeath)
			{
				System.out.println(c.getName() + " was marked for death and disconnected");
				broadcast(c.getName() + " disconnected");
				m_connectedClients.remove(c);
				c = null;	// May be unnecessary
			}
		}
	}

	public DatagramPacket pack(int ackCounter, String msg, InetAddress iadd, int port)
	{
		// Append message code and name to message, marshal packet and send it to assigned address and port
		String message = ackCounter + "|" + msg;
		byte[] data = message.getBytes();
		DatagramPacket packet = new DatagramPacket(data, message.length(), iadd, port);

		return packet;
	}

	public String unpack(DatagramPacket packet)
	{
		return new String(packet.getData(), 0, packet.getLength());
	}

	// Every few seconds, all clients are polled to see if they are still connected
	public class pollClientStatus implements Runnable 
	{
		String currentClient = null;
		
		@Override
		public void run()
		{
			System.out.println("Starting poll thread");
			while(true)
			{
				try
				{
					Thread.sleep(5000);
				} catch (InterruptedException e1)
				{
					System.err.println("Error: failed to pause poll thread");
					e1.printStackTrace();
				}
				
				ClientConnection c = null;
				for (Iterator<ClientConnection> itr = m_connectedClients.iterator(); itr.hasNext();)
				{
					try
					{
						c = itr.next();
						currentClient = c.getName();
					} catch (ConcurrentModificationException e)
					{
						if(!currentClient.equals(null))
							disconnectClient(currentClient);
						continue;
					}
					
					sendPrivateMessage(c.getName(), "%POLL%");

					receivedPoll = false;
					
					// Sleep between checks
					try
					{
						Thread.sleep(50);
					} catch (InterruptedException e)
					{
						System.err.println("Error: failed to sleep");
						e.printStackTrace();
					}
					
					if(receivedPoll)
					{
						System.out.println("Received client poll");
						continue;
					}
					else
					{
						System.err.println("Client acknowledgment timed out");
					}
				}
			}
		}
	}
}
